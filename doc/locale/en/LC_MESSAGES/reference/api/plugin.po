# -*- po -*-
# English translations for Groonga package.
# Copyright (C) 2009-2022 Groonga Project
# This file is distributed under the same license as the Groonga package.
# Automatically generated, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Groonga 12.0.1\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2022-02-28 11:57+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Plugin"
msgstr "Plugin"

msgid "Summary"
msgstr "Summary"

msgid ""
"Groonga supports plugin. You can create a new plugin with the following API."
msgstr ""
"Groonga supports plugin. You can create a new plugin with the following API."

msgid ""
"TOOD: Describe about how to create the minimum plugin here or create a "
"tutorial about it."
msgstr ""
"TOOD: Describe about how to create the minimum plugin here or create a "
"tutorial about it."

msgid "Reference"
msgstr "Reference"

msgid ""
"GRN_PLUGIN_MALLOC() allocates `size` bytes and returns a pointer to the "
"allocated memory space. Note that the memory space is associated with `ctx`."
msgstr ""
"GRN_PLUGIN_MALLOC() allocates `size` bytes and returns a pointer to the "
"allocated memory space. Note that the memory space is associated with `ctx`."

msgid ""
"GRN_PLUGIN_REALLOC() resizes the memory space pointed to by `ptr` or "
"allocates a new memory space of `size` bytes. GRN_PLUGIN_REALLOC() returns a "
"pointer to the memory space. The contents is unchanged or copied from the "
"old memory space to the new memory space."
msgstr ""
"GRN_PLUGIN_REALLOC() resizes the memory space pointed to by `ptr` or "
"allocates a new memory space of `size` bytes. GRN_PLUGIN_REALLOC() returns a "
"pointer to the memory space. The contents is unchanged or copied from the "
"old memory space to the new memory space."

msgid ""
"GRN_PLUGIN_FREE() frees a memory space allocated by GRN_PLUGIN_MALLOC() or "
"GRN_PLUGIN_REALLOC(). This means that `ptr` must be a pointer returned by "
"GRN_PLUGIN_MALLOC() or GRN_PLUGIN_REALLOC()."
msgstr ""
"GRN_PLUGIN_FREE() frees a memory space allocated by GRN_PLUGIN_MALLOC() or "
"GRN_PLUGIN_REALLOC(). This means that `ptr` must be a pointer returned by "
"GRN_PLUGIN_MALLOC() or GRN_PLUGIN_REALLOC()."

msgid ""
"GRN_PLUGIN_LOG() reports a log of `level`. Its error message is generated "
"from the varying number of arguments, in which the first one is the format "
"string and the rest are its arguments. See grn_log_level in \"groonga.h\" "
"for more details of `level`."
msgstr ""
"GRN_PLUGIN_LOG() reports a log of `level`. Its error message is generated "
"from the varying number of arguments, in which the first one is the format "
"string and the rest are its arguments. See grn_log_level in \"groonga.h\" "
"for more details of `level`."

msgid ""
"GRN_PLUGIN_ERROR() reports an error of `error_code`. Its error message is "
"generated from the varying number of arguments, in which the first one is "
"the format string and the rest are its arguments. See grn_rc in \"groonga."
"h\" for more details of `error_code`."
msgstr ""
"GRN_PLUGIN_ERROR() reports an error of `error_code`. Its error message is "
"generated from the varying number of arguments, in which the first one is "
"the format string and the rest are its arguments. See grn_rc in \"groonga."
"h\" for more details of `error_code`."

msgid ""
"grn_plugin_mutex is available to make a critical section. See the following "
"functions."
msgstr ""
"grn_plugin_mutex is available to make a critical section. See the following "
"functions."

msgid ""
"grn_plugin_mutex_open() returns a pointer to a new object of "
"grn_plugin_mutex. Memory for the new object is obtained with "
"GRN_PLUGIN_MALLOC(). grn_plugin_mutex_open() returns NULL if sufficient "
"memory is not available."
msgstr ""
"grn_plugin_mutex_open() returns a pointer to a new object of "
"grn_plugin_mutex. Memory for the new object is obtained with "
"GRN_PLUGIN_MALLOC(). grn_plugin_mutex_open() returns NULL if sufficient "
"memory is not available."

msgid ""
"grn_plugin_mutex_close() finalizes an object of grn_plugin_mutex and then "
"frees memory allocated for that object."
msgstr ""
"grn_plugin_mutex_close() finalizes an object of grn_plugin_mutex and then "
"frees memory allocated for that object."

msgid ""
"grn_plugin_mutex_lock() locks a mutex object. If the object is already "
"locked, the calling thread waits until the object will be unlocked."
msgstr ""
"grn_plugin_mutex_lock() locks a mutex object. If the object is already "
"locked, the calling thread waits until the object will be unlocked."

msgid ""
"grn_plugin_mutex_unlock() unlocks a mutex object. grn_plugin_mutex_unlock() "
"should not be called for an unlocked object."
msgstr ""
"grn_plugin_mutex_unlock() unlocks a mutex object. grn_plugin_mutex_unlock() "
"should not be called for an unlocked object."

msgid ""
"grn_plugin_proc_alloc() allocates a `grn_obj` object. You can use it in "
"function that is registered as GRN_PROC_FUNCTION."
msgstr ""
"grn_plugin_proc_alloc() allocates a `grn_obj` object. You can use it in "
"function that is registered as GRN_PROC_FUNCTION."

msgid ""
"It gets a variable value from `grn_user_data` by specifying the variable "
"name."
msgstr ""
"It gets a variable value from `grn_user_data` by specifying the variable "
"name."

msgid "Parameters"
msgstr "Parameters"

msgid "The variable name."
msgstr "The variable name."

msgid ""
"The number of bytes of name. If `name_size` is negative, `name` must be NUL-"
"terminated. `name_size` is computed by `strlen(name)` for the case."
msgstr ""
"The number of bytes of name. If `name_size` is negative, `name` must be NUL-"
"terminated. `name_size` is computed by `strlen(name)` for the case."

msgid "Returns"
msgstr "Returns"

msgid "A variable value on success, NULL otherwise."
msgstr "A variable value on success, NULL otherwise."

msgid ""
"It gets a variable value from `grn_user_data` by specifying the offset "
"position of the variable."
msgstr ""
"It gets a variable value from `grn_user_data` by specifying the offset "
"position of the variable."

msgid "The offset position of the variable."
msgstr "The offset position of the variable."

msgid "Use :c:func:`grn_plugin_windows_base_dir()` instead."
msgstr "Use :c:func:`grn_plugin_windows_base_dir()` instead."

msgid ""
"It returns the Groonga install directory. The install directory is computed "
"from the directory that has ``groonga.dll``. You can use the directory to "
"generate install directory aware path. It only works on Windows. It returns "
"``NULL`` on other platforms."
msgstr ""
"It returns the Groonga install directory. The install directory is computed "
"from the directory that has ``groonga.dll``. You can use the directory to "
"generate install directory aware path. It only works on Windows. It returns "
"``NULL`` on other platforms."

msgid ""
"grn_plugin_charlen() returns the length (#bytes) of the first character in "
"the string specified by `str_ptr` and `str_length`. If the starting bytes "
"are invalid as a character, grn_plugin_charlen() returns 0. See grn_encoding "
"in \"groonga.h\" for more details of `encoding`."
msgstr ""
"grn_plugin_charlen() returns the length (#bytes) of the first character in "
"the string specified by `str_ptr` and `str_length`. If the starting bytes "
"are invalid as a character, grn_plugin_charlen() returns 0. See grn_encoding "
"in \"groonga.h\" for more details of `encoding`."

msgid ""
"grn_plugin_isspace() returns the length (#bytes) of the first character in "
"the string specified by `str_ptr` and `str_length` if it is a space "
"character. Otherwise, grn_plugin_isspace() returns 0."
msgstr ""
"grn_plugin_isspace() returns the length (#bytes) of the first character in "
"the string specified by `str_ptr` and `str_length` if it is a space "
"character. Otherwise, grn_plugin_isspace() returns 0."

msgid "It initializes a `grn_expr_var`."
msgstr "It initializes a `grn_expr_var`."

msgid "The pointer of `grn_expr_var` object to be initialized."
msgstr "The pointer of `grn_expr_var` object to be initialized."

msgid "The name of `grn_expr_var` object to be initialized."
msgstr "The name of `grn_expr_var` object to be initialized."

msgid "``GRN_SUCCESS``. It doesn't fail."
msgstr "``GRN_SUCCESS``. It doesn't fail."

msgid "It creates a command."
msgstr "It creates a command."

msgid "The `proc` name of the command to be created."
msgstr "The `proc` name of the command to be created."

msgid "The function name to be called by the created command."
msgstr "The function name to be called by the created command."

msgid "The number of the variables of the command to create."
msgstr "The number of the variables of the command to create."

msgid "The pointer of initialized `grn_expr_var` object."
msgstr "The pointer of initialized `grn_expr_var` object."

msgid ""
"The created command object if it creates a command successfully, `NULL` "
"otherwise. See `ctx` for error details."
msgstr ""
"The created command object if it creates a command successfully, `NULL` "
"otherwise. See `ctx` for error details."
