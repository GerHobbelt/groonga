# -*- po -*-
# English translations for Groonga package.
# Copyright (C) 2009-2022 Groonga Project
# This file is distributed under the same license as the Groonga package.
# Automatically generated, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Groonga 12.0.1\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2022-02-28 11:57+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "``grn_ctx``"
msgstr "``grn_ctx``"

msgid "Summary"
msgstr "Summary"

msgid ""
":c:type:`grn_ctx` is the most important object. :c:type:`grn_ctx` keeps the "
"current information such as:"
msgstr ""
":c:type:`grn_ctx` is the most important object. :c:type:`grn_ctx` keeps the "
"current information such as:"

msgid "The last occurred error."
msgstr "The last occurred error."

msgid "The current encoding."
msgstr "The current encoding."

msgid "The default thresholds. (e.g. :ref:`select-match-escalation-threshold`)"
msgstr ""
"The default thresholds. (e.g. :ref:`select-match-escalation-threshold`)"

msgid ""
"The default command version. (See :doc:`/reference/command/command_version`)"
msgstr ""
"The default command version. (See :doc:`/reference/command/command_version`)"

msgid ":c:type:`grn_ctx` provides platform features such as:"
msgstr ":c:type:`grn_ctx` provides platform features such as:"

msgid "Memory management."
msgstr "Memory management."

msgid "Logging."
msgstr "Logging."

msgid "Most APIs receive :c:type:`grn_ctx` as the first argument."
msgstr "Most APIs receive :c:type:`grn_ctx` as the first argument."

msgid ""
"You can't use the same :c:type:`grn_ctx` from two or more threads. You need "
"to create a :c:type:`grn_ctx` for a thread. You can use two or more :c:type:"
"`grn_ctx` in a thread but it is not needed for usual use-case."
msgstr ""
"You can't use the same :c:type:`grn_ctx` from two or more threads. You need "
"to create a :c:type:`grn_ctx` for a thread. You can use two or more :c:type:"
"`grn_ctx` in a thread but it is not needed for usual use-case."

msgid "Example"
msgstr "Example"

msgid "TODO..."
msgstr "TODO..."

msgid "Reference"
msgstr "Reference"

msgid "ctxを初期化します。"
msgstr "ctxを初期化します。"

msgid "Parameters"
msgstr "Parameters"

msgid "初期化するctx構造体へのポインタを指定します。"
msgstr "初期化するctx構造体へのポインタを指定します。"

msgid "初期化する ``ctx`` のオプションを指定します。"
msgstr "初期化する ``ctx`` のオプションを指定します。"

msgid "Returns"
msgstr "Returns"

msgid "``GRN_SUCCESS`` on success, not ``GRN_SUCCESS`` on error."
msgstr "``GRN_SUCCESS`` on success, not ``GRN_SUCCESS`` on error."

msgid "ctxの管理するメモリを解放し、使用を終了します。"
msgstr "ctxの管理するメモリを解放し、使用を終了します。"

msgid ""
"If ``ctx`` is initialized by :c:func:`grn_ctx_open()` not :c:func:"
"`grn_ctx_init()`, you need to use :c:func:`grn_ctx_close()` instead of :c:"
"func:`grn_ctx_fin()`."
msgstr ""
"If ``ctx`` is initialized by :c:func:`grn_ctx_open()` not :c:func:"
"`grn_ctx_init()`, you need to use :c:func:`grn_ctx_close()` instead of :c:"
"func:`grn_ctx_fin()`."

msgid "解放するctx構造体へのポインタを指定します。"
msgstr "解放するctx構造体へのポインタを指定します。"

msgid "初期化された :c:type:`grn_ctx` オブジェクトを返します。"
msgstr "初期化された :c:type:`grn_ctx` オブジェクトを返します。"

msgid ""
":c:func:`grn_ctx_init()` で初期化された :c:type:`grn_ctx` オブジェクトは構造"
"体の実体をAPIの呼び元で確保するのに対して、 :c:func:`grn_ctx_open()` では"
"Groongaライブラリの内部で、実体を確保します。 どちらで初期化された :c:type:"
"`grn_ctx` も、 :c:func:`grn_ctx_fin()` で解放できます。 :c:func:"
"`grn_ctx_open()` で確保した :c:type:`grn_ctx` 構造体に関しては、:c:func:"
"`grn_ctx_fin()` で解放した後に、その :c:type:`grn_ctx` で作成した :c:type:"
"`grn_obj` を :c:func:`grn_obj_close()` によって解放しても問題ありません。"
msgstr ""
":c:func:`grn_ctx_init()` で初期化された :c:type:`grn_ctx` オブジェクトは構造"
"体の実体をAPIの呼び元で確保するのに対して、 :c:func:`grn_ctx_open()` では"
"Groongaライブラリの内部で、実体を確保します。 どちらで初期化された :c:type:"
"`grn_ctx` も、 :c:func:`grn_ctx_fin()` で解放できます。 :c:func:"
"`grn_ctx_open()` で確保した :c:type:`grn_ctx` 構造体に関しては、:c:func:"
"`grn_ctx_fin()` で解放した後に、その :c:type:`grn_ctx` で作成した :c:type:"
"`grn_obj` を :c:func:`grn_obj_close()` によって解放しても問題ありません。"

msgid ""
"It calls :c:func:`grn_ctx_fin()` and frees allocated memory for ``ctx`` by :"
"c:func:`grn_ctx_open()`."
msgstr ""
"It calls :c:func:`grn_ctx_fin()` and frees allocated memory for ``ctx`` by :"
"c:func:`grn_ctx_open()`."

msgid "no longer needed :c:type:`grn_ctx`."
msgstr "no longer needed :c:type:`grn_ctx`."

msgid "ctxを破棄するときに呼ばれる関数を設定します。"
msgstr "ctxを破棄するときに呼ばれる関数を設定します。"

msgid "対象ctxを指定します。"
msgstr "対象ctxを指定します。"

msgid "``ctx`` を破棄するときに呼ばれる関数を指定します。"
msgstr "``ctx`` を破棄するときに呼ばれる関数を指定します。"

msgid "command_versionを返します。"
msgstr "command_versionを返します。"

msgid "command_versionを変更します。"
msgstr "command_versionを変更します。"

msgid "変更後のcommand_versionを指定します。"
msgstr "変更後のcommand_versionを指定します。"

msgid ""
"ctxが操作対象とするdbを指定します。NULLを指定した場合は、dbを操作しない状態"
"(init直後の状態)になります。"
msgstr ""
"ctxが操作対象とするdbを指定します。NULLを指定した場合は、dbを操作しない状態"
"(init直後の状態)になります。"

msgid "Don't use it with :c:type:`grn_ctx` that has ``GRN_CTX_PER_DB`` flag."
msgstr "Don't use it with :c:type:`grn_ctx` that has ``GRN_CTX_PER_DB`` flag."

msgid "ctxが使用するdbを指定します。"
msgstr "ctxが使用するdbを指定します。"

msgid ""
"ctxが現在操作対象としているdbを返します。dbを使用していない場合はNULLを返しま"
"す。"
msgstr ""
"ctxが現在操作対象としているdbを返します。dbを使用していない場合はNULLを返しま"
"す。"

msgid ""
"ctxが使用するdbからnameに対応するオブジェクトを検索して返す。nameに一致するオ"
"ブジェクトが存在しなければNULLを返す。"
msgstr ""
"ctxが使用するdbからnameに対応するオブジェクトを検索して返す。nameに一致するオ"
"ブジェクトが存在しなければNULLを返す。"

msgid "検索しようとするオブジェクトの名前。"
msgstr "検索しようとするオブジェクトの名前。"

msgid ""
"The number of bytes of name. If negative value is specified, name is assumed "
"that NULL-terminated string."
msgstr ""
"The number of bytes of name. If negative value is specified, name is assumed "
"that NULL-terminated string."

msgid ""
"ctx、またはctxが使用するdbからidに対応するオブジェクトを検索して返す。idに一"
"致するオブジェクトが存在しなければNULLを返す。"
msgstr ""
"ctx、またはctxが使用するdbからidに対応するオブジェクトを検索して返す。idに一"
"致するオブジェクトが存在しなければNULLを返す。"

msgid "検索しようとするオブジェクトのidを指定します。"
msgstr "検索しようとするオブジェクトのidを指定します。"

msgid ""
"It pushes all tables in the database of ``ctx`` into ``tables_buffer``. "
"``tables_buffer`` should be initialized as ``GRN_PVECTOR``. You can use "
"``GRN_PTR_INIT()`` with ``GRN_OBJ_VECTOR`` flags to initialize "
"``tables_buffer``."
msgstr ""
"It pushes all tables in the database of ``ctx`` into ``tables_buffer``. "
"``tables_buffer`` should be initialized as ``GRN_PVECTOR``. You can use "
"``GRN_PTR_INIT()`` with ``GRN_OBJ_VECTOR`` flags to initialize "
"``tables_buffer``."

msgid "Here is an example:"
msgstr "Here is an example:"

msgid "The context object."
msgstr "The context object."

msgid "The output buffer to store tables."
msgstr "The output buffer to store tables."

msgid "Gets the current output type of the context."
msgstr "Gets the current output type of the context."

msgid "Normally, this function isn't needed."
msgstr "Normally, this function isn't needed."

msgid "The output type of the context."
msgstr "The output type of the context."

msgid ""
"Sets the new output type to the context. It is used by executing a command "
"by :c:func:`grn_expr_exec()`. If you use :c:func:`grn_ctx_send()`, the new "
"output type isn't used. :c:func:`grn_ctx_send()` sets output type from "
"command line internally."
msgstr ""
"Sets the new output type to the context. It is used by executing a command "
"by :c:func:`grn_expr_exec()`. If you use :c:func:`grn_ctx_send()`, the new "
"output type isn't used. :c:func:`grn_ctx_send()` sets output type from "
"command line internally."

msgid "The new output type."
msgstr "The new output type."

msgid "Checks whether object with the ID is opened or not."
msgstr "Checks whether object with the ID is opened or not."

msgid "The object ID to be checked."
msgstr "The object ID to be checked."

msgid "``GRN_TRUE`` if object with the ID is opened, ``GRN_FALSE`` otherwise."
msgstr "``GRN_TRUE`` if object with the ID is opened, ``GRN_FALSE`` otherwise."
