# -*- po -*-
# English translations for Groonga package.
# Copyright (C) 2009-2022 Groonga Project
# This file is distributed under the same license as the Groonga package.
# Automatically generated, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Groonga 12.0.1\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2022-02-28 11:57+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "``TokenDelimit``"
msgstr "``TokenDelimit``"

msgid "Summary"
msgstr "Summary"

msgid ""
"``TokenDelimit`` extracts token by splitting one or more space characters "
"(``U+0020``). For example, ``Hello World`` is tokenized to ``Hello`` and "
"``World``."
msgstr ""
"``TokenDelimit`` extracts token by splitting one or more space characters "
"(``U+0020``). For example, ``Hello World`` is tokenized to ``Hello`` and "
"``World``."

msgid ""
"``TokenDelimit`` is suitable for tag text. You can extract ``groonga`` and "
"``full-text-search`` and ``http`` as tags from ``groonga full-text-search "
"http``."
msgstr ""
"``TokenDelimit`` is suitable for tag text. You can extract ``groonga`` and "
"``full-text-search`` and ``http`` as tags from ``groonga full-text-search "
"http``."

msgid "Syntax"
msgstr "Syntax"

msgid "``TokenDelimit`` has optional parameter."
msgstr "``TokenDelimit`` has optional parameter."

msgid ""
"No options(Extracts token by splitting one or more space characters "
"(``U+0020``))::"
msgstr ""
"No options(Extracts token by splitting one or more space characters "
"(``U+0020``))::"

msgid "Specify delimiter::"
msgstr "Specify delimiter::"

msgid "Specify delimiter with regular expression::"
msgstr "Specify delimiter with regular expression::"

msgid ""
"The ``delimiter`` option and a ``pattern`` option are not use at the same "
"time."
msgstr ""
"The ``delimiter`` option and a ``pattern`` option are not use at the same "
"time."

msgid "Usage"
msgstr "Usage"

msgid "Simple usage"
msgstr "Simple usage"

msgid "Here is an example of ``TokenDelimit``:"
msgstr "Here is an example of ``TokenDelimit``:"

msgid "Execution example::"
msgstr "Execution example::"

msgid ""
"``TokenDelimit`` can also specify options. ``TokenDelimit`` has "
"``delimiter`` option and ``pattern`` option."
msgstr ""
"``TokenDelimit`` can also specify options. ``TokenDelimit`` has "
"``delimiter`` option and ``pattern`` option."

msgid "``delimiter`` option can split token with a specified character."
msgstr "``delimiter`` option can split token with a specified character."

msgid ""
"For example, ``Hello,World`` is tokenized to ``Hello`` and ``World`` with "
"``delimiter`` option as below."
msgstr ""
"For example, ``Hello,World`` is tokenized to ``Hello`` and ``World`` with "
"``delimiter`` option as below."

msgid ""
"``pattern`` option can split token with a regular expression. You can except "
"needless space by ``pattern`` option."
msgstr ""
"``pattern`` option can split token with a regular expression. You can except "
"needless space by ``pattern`` option."

msgid ""
"For example, ``This is a pen. This is an apple`` is tokenized to ``This is a "
"pen`` and ``This is an apple`` with ``pattern`` option as below."
msgstr ""
"For example, ``This is a pen. This is an apple`` is tokenized to ``This is a "
"pen`` and ``This is an apple`` with ``pattern`` option as below."

msgid ""
"Normally, when ``This is a pen. This is an apple.`` is splitted by ``.``, "
"needless spaces are included at the beginning of \"This is an apple.\"."
msgstr ""
"Normally, when ``This is a pen. This is an apple.`` is splitted by ``.``, "
"needless spaces are included at the beginning of \"This is an apple.\"."

msgid ""
"You can except the needless spaces by a ``pattern`` option as below example."
msgstr ""
"You can except the needless spaces by a ``pattern`` option as below example."

msgid "Advanced usage"
msgstr "Advanced usage"

msgid "``delimiter`` option can also specify multiple delimiters."
msgstr "``delimiter`` option can also specify multiple delimiters."

msgid ""
"For example, ``Hello, World`` is tokenized to ``Hello`` and ``World``. ``,`` "
"and `` `` are delimiters in below example."
msgstr ""
"For example, ``Hello, World`` is tokenized to ``Hello`` and ``World``. ``,`` "
"and `` `` are delimiters in below example."

msgid "You can extract token in complex conditions by ``pattern`` option."
msgstr "You can extract token in complex conditions by ``pattern`` option."

msgid ""
"For example, ``これはペンですか！？リンゴですか？「リンゴです。」`` is "
"tokenize to ``これはペンですか`` and ``リンゴですか``, ``「リンゴです。」`` "
"with ``delimiter`` option as below."
msgstr ""
"For example, ``これはペンですか！？リンゴですか？「リンゴです。」`` is "
"tokenize to ``これはペンですか`` and ``リンゴですか``, ``「リンゴです。」`` "
"with ``delimiter`` option as below."

msgid ""
"``\\\\s*`` of the end of above regular expression match 0 or more spaces "
"after a delimiter."
msgstr ""
"``\\\\s*`` of the end of above regular expression match 0 or more spaces "
"after a delimiter."

msgid ""
"``[。！？]+`` matches 1 or more ``。`` or ``！``, ``？``. For example, "
"``[。！？]+`` matches ``！？`` of ``これはペンですか！？``."
msgstr ""
"``[。！？]+`` matches 1 or more ``。`` or ``！``, ``？``. For example, "
"``[。！？]+`` matches ``！？`` of ``これはペンですか！？``."

msgid ""
"``(?![）」])`` is negative lookahead. ``(?![）」])`` matches if a character "
"is not matched ``）`` or ``」``. negative lookahead interprets in "
"combination regular expression of just before."
msgstr ""
"``(?![）」])`` is negative lookahead. ``(?![）」])`` matches if a character "
"is not matched ``）`` or ``」``. negative lookahead interprets in "
"combination regular expression of just before."

msgid "Therefore it interprets ``[。！？]+(?![）」])``."
msgstr "Therefore it interprets ``[。！？]+(?![）」])``."

msgid ""
"``[。！？]+(?![）」])`` matches if there are not ``）`` or ``」`` after ``。"
"`` or ``！``, ``？``."
msgstr ""
"``[。！？]+(?![）」])`` matches if there are not ``）`` or ``」`` after ``。"
"`` or ``！``, ``？``."

msgid ""
"In other words, ``[。！？]+(?![）」])`` matches ``。`` of ``これはペンです"
"か。``. But ``[。！？]+(?![）」])`` doesn't match ``。`` of ``「リンゴで"
"す。」``. Because there is ``」`` after ``。``."
msgstr ""
"In other words, ``[。！？]+(?![）」])`` matches ``。`` of ``これはペンです"
"か。``. But ``[。！？]+(?![）」])`` doesn't match ``。`` of ``「リンゴで"
"す。」``. Because there is ``」`` after ``。``."

msgid "``[\\\\r\\\\n]+`` match 1 or more newline character."
msgstr "``[\\\\r\\\\n]+`` match 1 or more newline character."

msgid ""
"In conclusion, ``([。！？]+(?![）」])|[\\\\r\\\\n]+)\\\\s*`` uses ``。`` and "
"``！`` and ``？``, newline character as delimiter. However, ``。`` and ``!"
"``, ``？`` are not delimiters if there is ``）`` or ``」`` after ``。`` or "
"``！``, ``？``."
msgstr ""
"In conclusion, ``([。！？]+(?![）」])|[\\\\r\\\\n]+)\\\\s*`` uses ``。`` and "
"``！`` and ``？``, newline character as delimiter. However, ``。`` and ``!"
"``, ``？`` are not delimiters if there is ``）`` or ``」`` after ``。`` or "
"``！``, ``？``."

msgid "Parameters"
msgstr "Parameters"

msgid "Optional parameter"
msgstr "Optional parameter"

msgid "There are two optional parameters ``delimiter`` and ``pattern``."
msgstr "There are two optional parameters ``delimiter`` and ``pattern``."

msgid "``delimiter``"
msgstr "``delimiter``"

msgid "Split token with a specified one or more characters."
msgstr "Split token with a specified one or more characters."

msgid "You can use one or more characters for a delimiter."
msgstr "You can use one or more characters for a delimiter."

msgid "``pattern``"
msgstr "``pattern``"

msgid "Split token with a regular expression."
msgstr "Split token with a regular expression."

msgid "See also"
msgstr "See also"

msgid ":doc:`../commands/tokenize`"
msgstr ":doc:`../commands/tokenize`"
