# -*- po -*-
# English translations for Groonga package.
# Copyright (C) 2009-2022 Groonga Project
# This file is distributed under the same license as the Groonga package.
# Automatically generated, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Groonga 12.0.1\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2022-02-28 11:57+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Tag search and reverse resolution of reference relationships"
msgstr "Tag search and reverse resolution of reference relationships"

msgid ""
"As you know, Groonga supports to store array in column which refers other "
"table. In fact, you can do tag search by using array data which refers other "
"table."
msgstr ""
"As you know, Groonga supports to store array in column which refers other "
"table. In fact, you can do tag search by using array data which refers other "
"table."

msgid ""
"Tag search is very fast because Groonga use inverted index as data structure."
msgstr ""
"Tag search is very fast because Groonga use inverted index as data structure."

msgid "Tag search"
msgstr "Tag search"

msgid ""
"Let's consider to create a search engine for an web site to share movies. "
"Each movie may be associated with multiple keywords which represents the "
"content of movie."
msgstr ""
"Let's consider to create a search engine for an web site to share movies. "
"Each movie may be associated with multiple keywords which represents the "
"content of movie."

msgid "Let's create tables for movie information, then search the movies."
msgstr "Let's create tables for movie information, then search the movies."

msgid ""
"First, create the ``Video`` table which stores movie information. the "
"``Video`` table has two columns. the ``title`` column stores title of the "
"movie. the ``tags`` column stores multiple tag information in reference Tag "
"table."
msgstr ""
"First, create the ``Video`` table which stores movie information. the "
"``Video`` table has two columns. the ``title`` column stores title of the "
"movie. the ``tags`` column stores multiple tag information in reference Tag "
"table."

msgid ""
"Next, create the ``Tag`` table which stores tag information. the ``Tag`` "
"table has one column. The tag string is stored as primary key, then "
"``index_tags`` stores indexes for tags column of Video table."
msgstr ""
"Next, create the ``Tag`` table which stores tag information. the ``Tag`` "
"table has one column. The tag string is stored as primary key, then "
"``index_tags`` stores indexes for tags column of Video table."

msgid "Execution example::"
msgstr "Execution example::"

msgid ""
"After creating indexed column, you can do full-text search very fast. The "
"indexed column is also automatically updated when stored data is refreshed."
msgstr ""
"After creating indexed column, you can do full-text search very fast. The "
"indexed column is also automatically updated when stored data is refreshed."

msgid "List up the movies that specific keywords are given."
msgstr "List up the movies that specific keywords are given."

msgid ""
"You can search by tags such as \"Variety\", \"Sports\" and \"Animation\"."
msgstr ""
"You can search by tags such as \"Variety\", \"Sports\" and \"Animation\"."

msgid "Reverse resolution of reference relationships"
msgstr "Reverse resolution of reference relationships"

msgid ""
"Groonga supports indexes for reverse resolution among tables. Tag search is "
"one of concrete examples."
msgstr ""
"Groonga supports indexes for reverse resolution among tables. Tag search is "
"one of concrete examples."

msgid ""
"For example, you can search friendships by reverse resolution in social "
"networking site."
msgstr ""
"For example, you can search friendships by reverse resolution in social "
"networking site."

msgid ""
"Following example shows how to create ``User`` table which stores user "
"information, ``username`` column which stores user name, ``friends`` column "
"which stores list of user's friends in array, ``index_friends`` column as "
"indexed column."
msgstr ""
"Following example shows how to create ``User`` table which stores user "
"information, ``username`` column which stores user name, ``friends`` column "
"which stores list of user's friends in array, ``index_friends`` column as "
"indexed column."

msgid "Let's show list of users who contains specified user in friend list."
msgstr "Let's show list of users who contains specified user in friend list."

msgid "Then drilldown the count which shows user is listed as friend."
msgstr "Then drilldown the count which shows user is listed as friend."

msgid ""
"As you can see, it shows the results which follows reverse resolution of "
"reference relationship."
msgstr ""
"As you can see, it shows the results which follows reverse resolution of "
"reference relationship."

msgid "Geo location search with index"
msgstr "Geo location search with index"

msgid ""
"Groonga supports to add indexes to the column which stores geo location "
"information. Groonga is very fast because it use such indexes against the "
"column which contains geo location information to search enormous number of "
"records."
msgstr ""
"Groonga supports to add indexes to the column which stores geo location "
"information. Groonga is very fast because it use such indexes against the "
"column which contains geo location information to search enormous number of "
"records."

msgid ""
"These indexes are also used when sorting the records with geo location "
"search."
msgstr ""
"These indexes are also used when sorting the records with geo location "
"search."
