# -*- po -*-
# English translations for Groonga package.
# Copyright (C) 2009-2022 Groonga Project
# This file is distributed under the same license as the Groonga package.
# Automatically generated, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Groonga 12.0.1\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: 2022-02-28 11:57+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "match_columns parameter"
msgstr "match_columns parameter"

msgid "Full-text search against multiple columns"
msgstr "Full-text search against multiple columns"

msgid ""
"Groonga supports full-text search against multiple columns. Let's consider "
"blog site. Usually, blog site has a table which contains title column and "
"content column. How do you search the blog entry which contains specified "
"keywords in title or content?"
msgstr ""
"Groonga supports full-text search against multiple columns. Let's consider "
"blog site. Usually, blog site has a table which contains title column and "
"content column. How do you search the blog entry which contains specified "
"keywords in title or content?"

msgid ""
"In such a case, there are two ways to create indexes. One way is creating "
"column index against each column. The other way is creating one column index "
"against multiple columns. Either way, Groonga supports similar full-text "
"search syntax."
msgstr ""
"In such a case, there are two ways to create indexes. One way is creating "
"column index against each column. The other way is creating one column index "
"against multiple columns. Either way, Groonga supports similar full-text "
"search syntax."

msgid "Creating column index against each column"
msgstr "Creating column index against each column"

msgid "Here is the example which create column index against each column."
msgstr "Here is the example which create column index against each column."

msgid ""
"First, create ``Blog1`` table, add ``title`` column which stores title "
"string, ``message`` column which stores content of blog entry."
msgstr ""
"First, create ``Blog1`` table, add ``title`` column which stores title "
"string, ``message`` column which stores content of blog entry."

msgid ""
"Then create ``IndexBlog1`` table for column indexes, add ``index_title`` "
"column for ``title`` column, ``index_message`` column for ``message`` column."
msgstr ""
"Then create ``IndexBlog1`` table for column indexes, add ``index_title`` "
"column for ``title`` column, ``index_message`` column for ``message`` column."

msgid "Execution example::"
msgstr "Execution example::"

msgid ""
"``match_columns`` option of ``select`` command accepts multiple columns as "
"search target. Specify query string to ``query`` option. Then you can do "
"full-text search title and content of blog entries."
msgstr ""
"``match_columns`` option of ``select`` command accepts multiple columns as "
"search target. Specify query string to ``query`` option. Then you can do "
"full-text search title and content of blog entries."

msgid "Let's try to search blog entries."
msgstr "Let's try to search blog entries."

msgid "Creating one column index against multiple columns"
msgstr "Creating one column index against multiple columns"

msgid "Groonga also supports one column index against multiple columns."
msgstr "Groonga also supports one column index against multiple columns."

msgid ""
"The difference for previous example is only one column index exists. Thus, "
"There is one common column index against title and message column."
msgstr ""
"The difference for previous example is only one column index exists. Thus, "
"There is one common column index against title and message column."

msgid ""
"Even though same column index is used, Groonga supports to search against "
"title column only, message column only and title or message column."
msgstr ""
"Even though same column index is used, Groonga supports to search against "
"title column only, message column only and title or message column."

msgid ""
"Let's search same query in previous section. You can get same search results."
msgstr ""
"Let's search same query in previous section. You can get same search results."

msgid ""
"There may be a question that \"which is the better solution for indexing.\" "
"It depends on the case."
msgstr ""
"There may be a question that \"which is the better solution for indexing.\" "
"It depends on the case."

msgid ""
"Indexes for each column - The update performance tends to be better than "
"multiple colum index because there is enough buffer for updating. On the "
"other hand, the efficiency of disk usage is not so good."
msgstr ""
"Indexes for each column - The update performance tends to be better than "
"multiple colum index because there is enough buffer for updating. On the "
"other hand, the efficiency of disk usage is not so good."

msgid ""
"Indexes for multiple column - It saves disk usage because it shares common "
"buffer. On the other hand, the update performance is not so good."
msgstr ""
"Indexes for multiple column - It saves disk usage because it shares common "
"buffer. On the other hand, the update performance is not so good."

msgid "Full text search with specific index name"
msgstr "Full text search with specific index name"

msgid "Groonga also supports full text search with specific index name."
msgstr "Groonga also supports full text search with specific index name."

msgid ""
"In this section, you learn how to use specific index column efficiently."
msgstr ""
"In this section, you learn how to use specific index column efficiently."

msgid "Here is the concrete example about specific index name."
msgstr "Here is the concrete example about specific index name."

msgid ""
"The table which stores entries has columns for title and body. And the terms "
"table has index columns for title and body to entries table."
msgstr ""
"The table which stores entries has columns for title and body. And the terms "
"table has index columns for title and body to entries table."

msgid "There are three index columns in terms table."
msgstr "There are three index columns in terms table."

msgid "entries_title: index column for title"
msgstr "entries_title: index column for title"

msgid "entries_body: index column for body"
msgstr "entries_body: index column for body"

msgid "entries_whole: index column for title and body"
msgstr "entries_whole: index column for title and body"

msgid ""
"If you specify index column which is related to specific data column, "
"related data column is searched with that index implicitly."
msgstr ""
"If you specify index column which is related to specific data column, "
"related data column is searched with that index implicitly."

msgid ""
"For example, if you want to search title or body only, specify ``Terms."
"entries_title`` or ``Terms.entries_body`` index column."
msgstr ""
"For example, if you want to search title or body only, specify ``Terms."
"entries_title`` or ``Terms.entries_body`` index column."

msgid ""
"This example uses ``Terms.entries_title`` as index, then search \"Groonga\" "
"against title data column."
msgstr ""
"This example uses ``Terms.entries_title`` as index, then search \"Groonga\" "
"against title data column."

msgid ""
"This example uses ``Terms.entries_body`` as index, then search \"Groonga\" "
"against body data column."
msgstr ""
"This example uses ``Terms.entries_body`` as index, then search \"Groonga\" "
"against body data column."

msgid ""
"If you specify multiple index column which is related to specific data "
"columns, you can also specify data column name as suffix. It means that "
"\"Use specific index and search specific data column explicitly\"."
msgstr ""
"If you specify multiple index column which is related to specific data "
"columns, you can also specify data column name as suffix. It means that "
"\"Use specific index and search specific data column explicitly\"."

msgid ""
"For example, if you want to search title or body only with ``entries_whole`` "
"index, specify ``Terms.entries_whole.title`` or ``Terms.entries_whole."
"body``. It uses ``Terms.entries_whole`` index and search ``title`` column or "
"``body`` column explicitly."
msgstr ""
"For example, if you want to search title or body only with ``entries_whole`` "
"index, specify ``Terms.entries_whole.title`` or ``Terms.entries_whole."
"body``. It uses ``Terms.entries_whole`` index and search ``title`` column or "
"``body`` column explicitly."

msgid ""
"This example uses ``Terms.entries_whole`` as index, then search \"Groonga\" "
"against title data column."
msgstr ""
"This example uses ``Terms.entries_whole`` as index, then search \"Groonga\" "
"against title data column."

msgid ""
"This example uses ``Terms.entries_whole`` as index, then search \"Groonga\" "
"against body data column."
msgstr ""
"This example uses ``Terms.entries_whole`` as index, then search \"Groonga\" "
"against body data column."

msgid "Nested index search among related table by column index"
msgstr "Nested index search among related table by column index"

msgid ""
"If there are relationships among multiple table with column index, you can "
"search multiple table by specifying reference column name."
msgstr ""
"If there are relationships among multiple table with column index, you can "
"search multiple table by specifying reference column name."

msgid "Here is the concrete example."
msgstr "Here is the concrete example."

msgid ""
"There are tables which store blog articles, comments for articles. The table "
"which stores articles has columns for article and comment. And the comment "
"column refers Comments table. The table which stores comments has columns "
"for comment and column index to article table."
msgstr ""
"There are tables which store blog articles, comments for articles. The table "
"which stores articles has columns for article and comment. And the comment "
"column refers Comments table. The table which stores comments has columns "
"for comment and column index to article table."

msgid ""
"if you want to search the articles which contain specified keyword in "
"comment, you need to execute fulltext search for table of comment, then "
"search the records which contains fulltext search results."
msgstr ""
"if you want to search the articles which contain specified keyword in "
"comment, you need to execute fulltext search for table of comment, then "
"search the records which contains fulltext search results."

msgid ""
"But, you can search the records by specifying the reference column index at "
"once."
msgstr ""
"But, you can search the records by specifying the reference column index at "
"once."

msgid "Here is the sample schema."
msgstr "Here is the sample schema."

msgid "Here is the sample data."
msgstr "Here is the sample data."

msgid ""
"You can write the query that search the records which contains specified "
"keyword as a comment, then fetch the articles which refers to it."
msgstr ""
"You can write the query that search the records which contains specified "
"keyword as a comment, then fetch the articles which refers to it."

msgid "Query for searching the records described above::"
msgstr "Query for searching the records described above::"

msgid ""
"You need to concatenate comment column of Articles table and content column "
"of Comments table with period( ``.`` ) as ``--match_columns`` arguments."
msgstr ""
"You need to concatenate comment column of Articles table and content column "
"of Comments table with period( ``.`` ) as ``--match_columns`` arguments."

msgid ""
"At first, this query execute fulltext search from content of Comments table, "
"then fetch the records of Articles table which refers to already searched "
"records of Comments table. (Because of this, if you comment out the query "
"which creates index column ``article`` of Comments table, you can't get "
"intended search results.)"
msgstr ""
"At first, this query execute fulltext search from content of Comments table, "
"then fetch the records of Articles table which refers to already searched "
"records of Comments table. (Because of this, if you comment out the query "
"which creates index column ``article`` of Comments table, you can't get "
"intended search results.)"

msgid ""
"Now, you can search articles which contains specific keywords as a comment."
msgstr ""
"Now, you can search articles which contains specific keywords as a comment."

msgid ""
"The feature of nested index search is not limited to the relationship "
"between two table only."
msgstr ""
"The feature of nested index search is not limited to the relationship "
"between two table only."

msgid ""
"Here is the sample schema similar to previous one. The difference is added "
"table which express 'Reply' and relationship is extended to three tables."
msgstr ""
"Here is the sample schema similar to previous one. The difference is added "
"table which express 'Reply' and relationship is extended to three tables."

msgid ""
"The first query searches ``mroonga`` from ``Comments2`` table, the second "
"one searches ``mroonga`` from ``Replies2`` and ``Comments2`` table by using "
"reference column index."
msgstr ""
"The first query searches ``mroonga`` from ``Comments2`` table, the second "
"one searches ``mroonga`` from ``Replies2`` and ``Comments2`` table by using "
"reference column index."

msgid ""
"As a result, the first query matches two article because of ``Comments2`` "
"table has two records which contains ``mroonga`` as keyword."
msgstr ""
"As a result, the first query matches two article because of ``Comments2`` "
"table has two records which contains ``mroonga`` as keyword."

msgid ""
"On the other hand, the second one matches one article only because of "
"``Replies2`` table has only one record which contains ``mroonga`` as "
"keyword, and there is one record which contains same keyword and refers to "
"the record in ``Comments2`` table."
msgstr ""
"On the other hand, the second one matches one article only because of "
"``Replies2`` table has only one record which contains ``mroonga`` as "
"keyword, and there is one record which contains same keyword and refers to "
"the record in ``Comments2`` table."

msgid "Indexes with Weight"
msgstr "Indexes with Weight"

msgid ""
"If index columns are created for data columns, you can search by indexes "
"with weight. For example, let's try to search blog entries by indexes with "
"weight which contains ``Groonga`` as important keyword in ``Blog1`` table. "
"Generally speaking, an important keyword tend to be included in blog title, "
"so if ``title`` column contains ``Groonga``, its score ( ``_score`` ) must "
"be raised in contrast to ``message`` column. The indexes with weight is used "
"for such a purpose."
msgstr ""
"If index columns are created for data columns, you can search by indexes "
"with weight. For example, let's try to search blog entries by indexes with "
"weight which contains ``Groonga`` as important keyword in ``Blog1`` table. "
"Generally speaking, an important keyword tend to be included in blog title, "
"so if ``title`` column contains ``Groonga``, its score ( ``_score`` ) must "
"be raised in contrast to ``message`` column. The indexes with weight is used "
"for such a purpose."

msgid ""
"Here is the example which search blog entries with ``Groonga`` as important "
"keyword in ``title`` or ``message`` columns."
msgstr ""
"Here is the example which search blog entries with ``Groonga`` as important "
"keyword in ``title`` or ``message`` columns."

msgid ""
"The sample schema and data is same as :ref:`creating-column-index-against-"
"each-column`."
msgstr ""
"The sample schema and data is same as :ref:`creating-column-index-against-"
"each-column`."

msgid ""
"In above query, ``'IndexBlog1.index_title * 10 || IndexBlog1."
"index_message'`` is specified for ``--match_columns``. It means that if "
"``title`` column (search ``title`` column using ``IndexBlog1.index_title`` "
"index) matches to ``Groonga``, its weight is multiplied to 10 and if "
"``message`` column (search ``message`` column using ``IndexBlog1."
"index_message`` index) matches to ``Groonga``, its weight is 1 (default). If "
"``Groonga`` matches to ``title`` and ``message``, its weight is 11 (10 + 1) "
"in this case."
msgstr ""
"In above query, ``'IndexBlog1.index_title * 10 || IndexBlog1."
"index_message'`` is specified for ``--match_columns``. It means that if "
"``title`` column (search ``title`` column using ``IndexBlog1.index_title`` "
"index) matches to ``Groonga``, its weight is multiplied to 10 and if "
"``message`` column (search ``message`` column using ``IndexBlog1."
"index_message`` index) matches to ``Groonga``, its weight is 1 (default). If "
"``Groonga`` matches to ``title`` and ``message``, its weight is 11 (10 + 1) "
"in this case."

msgid "As a result, ``Groonga test`` blog entry is listed in first."
msgstr "As a result, ``Groonga test`` blog entry is listed in first."
