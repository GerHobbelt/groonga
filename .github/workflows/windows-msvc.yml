name: "Windows MSVC"
on:
  - push
  - pull_request
jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        label:
          - Visual Studio 2019 x64
        include:
          - label: Visual Studio 2019 x64
            architecture: x64
            artifact_name: vs-2019-x64
            cmake_generator: Visual Studio 16 2019
    runs-on: windows-latest
    steps:
      - name: Disable crash dialog
        run: |
          reg add "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Use JST
        run: |
          Set-TimeZone -Id "Tokyo Standard Time"
      - uses: actions/setup-ruby@master
      - uses: actions/checkout@master
      - name: Update submodules
        run: |
          git submodule update --init --recursive
      - name: Download bundled packages
        run: |
          cd vendor
          ruby download_groonga_normalizer_mysql.rb
          ruby download_lz4.rb
          ruby download_mecab.rb
          ruby download_message_pack.rb
          ruby download_rapidjson.rb
      - name: Generate env.ps1 and env.bat
        run: |
          echo "`$Env:CMAKE_BUILD_PARALLEL_LEVEL = ${Env:NUMBER_OF_PROCESSORS}" >> env.ps1
          echo "set CMAKE_BUILD_PARALLEL_LEVEL=${Env:NUMBER_OF_PROCESSORS}" >> env.bat
          $GROONGA_VERSION = (Get-Content base_version)
          if (!("${Env:GITHUB_REF}".StartsWith("refs/tags/"))) {
            $GROONGA_VERSION += "-$(${Env:GITHUB_SHA}.Substring(0, 7))"
          }
          "GRN_VERSION=${GROONGA_VERSION}" | Set-Content version.sh
          $INSTALL_FOLDER = "groonga-${GROONGA_VERSION}-x64-vs2019"
          $INSTALL_PARENT_FOLDER = "インストール"
          $FULL_INSTALL_FOLDER = `
            "${Env:GITHUB_WORKSPACE}\${INSTALL_PARENT_FOLDER}\${INSTALL_FOLDER}"
          echo "`$INSTALL_FOLDER = `"${INSTALL_FOLDER}`"" >> env.ps1
          echo "set INSTALL_FOLDER=${INSTALL_FOLDER}" >> env.bat
          echo "`$FULL_INSTALL_FOLDER = `"${FULL_INSTALL_FOLDER}`"" >> env.ps1
          echo "set FULL_INSTALL_FOLDER=${FULL_INSTALL_FOLDER}" >> env.bat
          Get-Content env.ps1
          Get-Content env.bat
      - name: Install Apache Arrow
        run: |
          . .\env.ps1
          New-Item ..\apache-arrow-build -ItemType Directory
          cmake `
            -S vendor\apache-arrow-source\cpp `
            -B ..\apache-arrow-build `
            -A ${{ matrix.architecture }} `
            -G "${{ matrix.cmake_generator }}" `
            -DARROW_VERBOSE_THIRDPARTY_BUILD=ON `
            -DBOOST_SOURCE=BUNDLED `
            -DCMAKE_BUILD_TYPE=Release `
            "-DCMAKE_INSTALL_PREFIX=${FULL_INSTALL_FOLDER}"
          cmake --build ..\apache-arrow-build --config Release
          cmake --build ..\apache-arrow-build --config Release --target Install
      - name: Install dependencies
        run: |
          choco install -y winflexbison3
      - name: Install Groonga
        shell: cmd
        run: |
          call env.bat
          set YACC="win_bison.exe"
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          mkdir ..\groonga-build
          cmake ^
            -S . ^
            -B ..\groonga-build ^
            -A ${{ matrix.architecture }} ^
            -G "${{ matrix.cmake_generator }}" ^
            "-DCMAKE_INSTALL_PREFIX=%FULL_INSTALL_FOLDER%" ^
            -DCMAKE_BUILD_TYPE=ReWithDebInfo ^
            -DGRN_WITH_APACHE_ARROW=yes ^
            -DGRN_WITH_MRUBY=yes
          type ..\groonga-build\CMakeFiles\CMakeError.log
          cmake --build ..\groonga-build --config RelWithDebInfo
          cmake --build ..\groonga-build --config RelWithDebInfo --target Install

      # Artifact
      - name: Prepare artifacts
        run: |
          . .\env.ps1
          New-Item ..\packages -ItemType Directory
          pushd "${FULL_INSTALL_FOLDER}\.."
          Compress-Archive `
            -Path ${INSTALL_FOLDER} `
            -DestinationPath "${Env:GITHUB_WORKSPACE}\..\packages\${INSTALL_FOLDER}.zip"
          popd
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.artifact_name }}
          path: ..\packages

      # Release
      - name: Asset
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: asset
        run: |
          . .\env.ps1
          Write-Output "::set-output name=base_name::${INSTALL_FOLDER}"
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ../packages/${{ steps.asset.outputs.base_name }}.zip
          asset_name: ${{ steps.asset.outputs.base_name }}.zip
          asset_content_type: application/zip

      # Test
      - name: Update MSYS2
        run: |
          ridk exec pacman --sync --refresh --sysupgrade --noconfirm
      - name: Update GCC
        run: |
          ridk exec pacman --sync --noconfirm mingw-w64-x86_64-gcc
      - name: Install grntest
        run: |
          git clone --depth 1 `
            https://github.com/groonga/grntest.git `
            ..\grntest
          cd ..\grntest
          bundle install
          bundle exec ruby -rdevkit -S rake install
      - name: Test Groonga
        run: |
          . .\env.ps1
          grntest `
           --base-directory test\command `
           --groonga "${FULL_INSTALL_FOLDER}\bin\groonga.exe" `
           --input-type apache-arrow `
           --interface http `
           --n-retries 2 `
           --n-workers ${Env:NUMBER_OF_PROCESSORS} `
           --read-timeout 30 `
           --reporter mark `
           --timeout 60 `
           test\command\suite
