name: Linux
on:
  push:
    branches:
      - master
      - 'maintenance/**'
    tags:
      - '*'
  pull_request:
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  autotools:
    name: Autotools
    strategy:
      fail-fast: false
      matrix:
        label:
          - "GCC: mruby"
          - "Clang: mruby"
        include:
          - label: "GCC: mruby"
            id: autotools-gcc-mruby
            use-mruby: true
          - label: "Clang: mruby"
            id: autotools-clang-mruby
            use-mruby: true
            packages: >-
              clang
            configure-options: >-
              CC=clang
              CXX=clang++
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Enable Apache Arrow repository
        run: |
          sudo apt update -o="APT::Acquire::Retries=3"
          sudo apt install -y -V -o="APT::Acquire::Retries=3" \
            lsb-release \
            wget
          wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
      - name: Install packages
        run: |
          sudo apt update -o="APT::Acquire::Retries=3"
          sudo apt install -y -V -o="APT::Acquire::Retries=3" \
            autoconf-archive \
            automake1.11 \
            autotools-dev \
            ccache \
            cmake \
            gdb \
            gettext \
            libarrow-dev \
            libevent-dev \
            libluajit-5.1-dev \
            liblz4-dev \
            libmecab-dev \
            libmsgpack-dev \
            libstemmer-dev \
            libxxhash-dev \
            libzstd-dev \
            mecab-naist-jdic \
            rapidjson-dev \
            ruby-dev \
            zlib1g-dev \
            ${{ matrix.packages }}
          echo "/usr/lib/ccache" >> $GITHUB_PATH
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: source-${{ matrix.id }}-ccache-${{ hashFiles('lib/**', 'src/**', 'plugins/**', 'include/**') }}
          restore-keys: source-${{ matrix.id }}-ccache-
      - name: Install Cutter
        run: |
          curl \
            --silent \
            --location \
            https://raw.github.com/clear-code/cutter/master/data/travis/setup.sh | sh
      - name: Install Bundler
        run: |
          sudo gem install bundler
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure
        run: |
          configure_args=()
          if [ "${{ matrix.use-mruby }}" = "true" ]; then
            configure_args+=(--enable-mruby)
          fi
          ./configure \
            --enable-debug \
            --prefix=$PWD/install \
            --with-ruby \
            "${configure_args[@]}" \
            ${{ matrix.configure-options }}
      - name: Build
        run: |
          make -j$(nproc)
      - name: "Test: API"
        run: |
          bash -x test/unit/run-test.sh
      - name: Install test dependencies
        run: |
          sudo env MAKEFLAGS=-j$(nproc) gem install \
            groonga-client \
            json \
            native-package-installer \
            pkg-config
      - name: "Test: mruby"
        if: |
          matrix.use-mruby
        run: |
          bash -x test/mruby/run-test.sh
      - name: Install
        run: |
          make install
      - name: Install test dependencies
        run: |
          sudo env MAKEFLAGS=-j$(nproc) gem install \
            grntest \
            pkg-config \
            red-arrow
      - name: Set environment variables
        run: |
          echo "COLUMNS=79" >> ${GITHUB_ENV}
          echo "LD_LIBRARY_PATH=$PWD/install/lib" >> ${GITHUB_ENV}
          echo "TZ=Asia/Tokyo" >> ${GITHUB_ENV}

          echo "$PWD/install/bin" >> ${GITHUB_PATH}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/red-datasets
          key: red-datasets-ubuntu
      - name: "Test: command line"
        run: |
          test/command_line/run-test.rb --groonga-install-prefix=$PWD/install
      - name: "Test: stdio"
        run: |
          grntest \
            --base-dir test/command \
            --n-retries=2 \
            --read-timeout=30 \
            --reporter=mark \
            test/command/suite
